version: '3.8' # 2.4 is the last version that supports depends_on conditions for service health

volumes:
    cassandra-data: {} 
    cassandra-post-data: {} 
    cassandra-ad-data: {} 
    cassandra-story-data: {} 
    redis-data: {}
    redis.conf: {}
    auth-redis-data: {}
    auth-redis.conf: {}
    follow-data: {}
    search-data: {}
    user-data: {}
    auth-data: {}
    webshop-mongo-data: {}
    etc-krakend : {}
    notification-data: {}
    webshop-data: {}
    webshop-redis-data: {}
    webshop-redis.conf: {}
    saga-redis-data: {}
    saga-redis.conf: {}
    message-data: {}
    grafana: {}
    story-data: {}
    story-redis-data: {}
    story-redis.conf: {}
    post-data: {}

networks:
  cassandra:  # docker network where all cassandra nodes will be put in
  node_net:
    ipam:
      driver: default
      config:
        - subnet: 172.29.0.0/16
  demo:
    
  
services:

    prometheus:
      image: prom/prometheus:latest
      volumes:
        - ./prometheus:/etc/prometheus/
      command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
      ports:
        - 9090:9090
      depends_on:
        - authms
      networks:
        - demo


    grafana:
      image: grafana/grafana:latest
      ports:
        - 3000:3000
      depends_on:
        - prometheus
      networks:
        - demo

    authms:
      image: authms
      container_name: authms
      depends_on:
        - authredis
        - authpostgres
        - sagaredis
      environment:
        - PORT=8091
        - USER_DOMAIN=userms
        - DOCKER_ENV=true
      networks:
        - demo
      ports:
        - 8091:8091
      restart: on-failure

    authpostgres:
      image: postgres:latest
      container_name: authpostgres
      restart: always
      ports: 
        - 5433:5432
      environment:
        POSTGRES_USER: "postgres"
        POSTGRES_PASSWORD: "root"
        POSTGRES_DB: authentication
      networks:
        - demo
      volumes:
        - auth-data:/var/lib/auth

    

    authredis:
      image: "redis:alpine"
      command: redis-server
      ports:
        - "6380:6379"
      volumes:
        - auth-redis-data:/var/lib/redis
        - auth-redis.conf:/usr/local/etc/redis/redis.conf
      environment:
        - REDIS_REPLICATION_MODE=master
      networks:
        - demo
        
    searchms:
      image: searchms
      container_name: searchms
      depends_on:
        - mongosearch
      networks:
        - demo
      ports:
        - 8087:8087
      environment: 
        - DOCKER_ENV=true
      volumes:
        - search-data:/data/db:rw
      restart: on-failure
      networks:
        - demo

    userms:
      image: userms
      container_name: userms
      depends_on:
        - mongouser
        - sagaredis
      environment:
        - PORT=8082
        - DOCKER_ENV=true
      networks:
        - demo
      ports:
        - 8082:8082
      volumes:
        - user-data:/data/db:rw
      restart: on-failure

    storyms:
      image: storyms
      container_name: storyms
      depends_on:
        - cassandrastory
      environment:
        - PORT=8084
        - USER_DOMAIN=userms
        - FOLLOW_DOMAIN=followms
        - DOCKER_ENV=true
      networks:
        - demo
      ports:
        - 8084:8084
      volumes:
        - story-data:/data/db:rw
      restart: on-failure
      
    notificationms:
      image: notificationms
      container_name: notificationms
      depends_on:
        - mongonotification
      networks:
        - demo
      environment: 
        - DOCKER_ENV=true
      ports:
        - 8094:8094
      volumes:
        - notification-data:/data/db:rw
      restart: on-failure

    postms:
      image: postms
      container_name: postms
      depends_on:
        - cassandrapost
      environment:
        - PORT=8083
        - USER_DOMAIN=userms
        - FOLLOW_DOMAIN=followms
        - DOCKER_ENV=true
      networks:
        - demo
      ports:
        - 8083:8083
      volumes:
        - post-data:/data/db:rw
      restart: on-failure

    sagaredis:
      image: "redis:alpine"
      command: redis-server
      ports:
        - "6381:6379"
      volumes:
        - saga-redis-data:/var/lib/redis
        - saga-redis.conf:/usr/local/etc/redis/redis.conf
      environment:
        - REDIS_REPLICATION_MODE=master
      networks:
        - demo

    mongosearch:
      image: 'mongo:4.2.6-bionic'
      container_name: mongo-search
      ports:
        - "27019:27017"
      volumes:
        - search-data:/data/db
      restart: always     
      networks:
        - demo

    mongouser:
      image: 'mongo:4.2.6-bionic'
      container_name: mongouser
      ports:
        - '27018:27017'
      networks:
        - demo
      volumes:
        - user-data:/data/db
      restart: on-failure

    mongonotification:
      image: 'mongo:4.2.6-bionic'
      container_name: mongonotification
      ports:
        - '27020:27017'
      volumes:
        - notification-data:/data/db
      restart: on-failure
      networks:
        - demo

    cassandrastory:
      image: cassandra:3.11.8   # better to use a specific version, if you want to control upgrades
      container_name: cassandrastory
      mem_limit: 2g  # It's not strictly required, but it's better to have some memory limit
      ports:
        - 7001:9042
      expose:
        - 7001
      networks:
          - demo
      volumes:
        - story-data:/var/lib/cassandra

    storyredis:
      image: "redis:alpine"
      command: redis-server
      container_name: storyredis
      ports:
        - "6378:6379"
      volumes:
        - story-redis-data:/var/lib/redis
        - story-redis.conf:/usr/local/etc/redis/redis.conf
      environment:
        - REDIS_REPLICATION_MODE=master
      networks:
        - demo
      restart: on-failure   
    
    cassandrapost:
      image: cassandra:3.11.8   # better to use a specific version, if you want to control upgrades
      container_name: cassandrapost
      mem_limit: 2g  # It's not strictly required, but it's better to have some memory limit
      ports:
        - 7000:7000
      expose:
        - 7000
      networks:
          - demo
        
      volumes:
        - post-data:/var/lib/cassandra 

    